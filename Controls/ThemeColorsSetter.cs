using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Text.Json.Serialization;
using System.Windows.Forms;
using BazthalLib.Configuration;
using BazthalLib.Systems.IO;
using BazthalLib.UI;

namespace BazthalLib.Controls
{
    public class ThemeColorsSetter : UserControl
    {
        #region Fields and Properties
        private string _version = "V1.1";
        private bool _useThemeColors = true;
        private ThemeColors _themeColors = new();
        private bool _enableBorder = false;
        private int _btnX = 10;
        private int _btnY = 25;
        private int _lblX = 50;
        private int _lblY = 30;
        private bool _forceCustom = false;
        private bool _showSaveLoad = false;
        private string _configFilePath = "CustomTheme.json"; //Default config location would be in the startupPath
        private bool _autoLoadConfig = false;


        private Color _designerBack = SystemColors.Control, _designerFore = SystemColors.ControlText, _designerAccent = Color.DodgerBlue, _designerBorder = SystemColors.ActiveBorder,
            _designerSelectedBack = Color.Aqua, _designerSelectedFore = Color.Blue, _designerDisabled = SystemColors.ControlDark;

        /// <summary>
        /// Gets the unique identifier for the control, generated by the BazthalLib library.
        /// </summary>
        [Category("BazthalLib")]
        [Description("This has been added by the BazhalLib Library")]
        [ReadOnly(true)]
        public string ControlID => $"BazthalLib ThemeColorSetter {_version}";


        /// <summary>
        /// Gets or sets a value indicating whether a border is drawn around the control.
        /// </summary>
        [Browsable(true)]
        [Category("BazthalLib - Appearance")]
        [Description("Whether to draw a border around the control.")]
        [DefaultValue(false)]
        public bool EnableBorder
        {
            get => _enableBorder;
            set
            {
                _enableBorder = value;
                BorderStyle = value ? BorderStyle.FixedSingle : BorderStyle.None;
                Invalidate(); // Force redraw to apply changes
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether theme colors are used for the appearance.
        /// </summary>
        /// <remarks>Changing this property will force a redraw to apply the new appearance
        /// settings.</remarks>
        [Browsable(true)]
        [Category("BazthalLib - Appearance")]
        [Description("Whether to use theme colors or not.")]
        [DefaultValue(true)]
        public bool UseThemeColors
        {
            get => _useThemeColors;
            set
            {
                _useThemeColors = value;
                Invalidate(); // Force redraw to apply changes
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the save and load buttons are visible.
        /// </summary>
        [Browsable(true)]
        [Category("BazthalLib - Appearance")]
        [Description("Whether to show the save and load buttons or not")]
        [DefaultValue(false)]
        public bool ShowSaveAndLoadButtons
        {
            get => _showSaveLoad;
            set
            {
                _showSaveLoad = value;
                saveThemeButton.Visible = value;
                loadThemeButton.Visible = value;
                Invalidate(); // Force redraw to apply changes
            }
        }

        /// <summary>
        /// Gets or sets the border style of the control. This property is hidden from the property browser and  always
        /// sets the border style to <see cref="BorderStyle.None"/>.
        /// </summary>
        /// <remarks>Setting this property will invalidate the control, forcing a redraw to apply the
        /// changes.</remarks>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new BorderStyle BorderStyle
        {
            get => base.BorderStyle;
            set
            {
                base.BorderStyle = BorderStyle.None;
                Invalidate(); // Force redraw to apply changes
            }
        }

        /// <summary>
        /// Gets or sets the background color of the control.
        /// </summary>
        /// <remarks>This property is hidden from the property browser and does not participate in
        /// designer serialization.</remarks>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Color BackColor
        {
            get => base.BackColor;
            set
            {
                base.BackColor = value;
                Invalidate(); // Force redraw to apply changes
            }
        }

        /// <summary>
        /// Gets or sets the foreground color of the control.
        /// </summary>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Color ForeColor
        {
            get => base.ForeColor;
            set
            {
                base.ForeColor = value;
                Invalidate(); // Force redraw to apply changes
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the theme is forced to be set to custom.
        /// </summary>
        /// <remarks>When set to <see langword="true"/>, the theme is explicitly set to custom, overriding
        /// any other theme settings.</remarks>
        [Browsable(true)]
        [Category("BazthalLib - Appearance")]
        [Description("Force theme to be set to custom")]
        [DefaultValue(false)]
        public bool ForceCustom
        {
            get => _forceCustom;
            set { _forceCustom = value; Invalidate(); if (_forceCustom == true) Theming.SetTheme(Theming.AppTheme.Custom); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the configuration should be automatically loaded on startup.
        /// </summary>
        [Browsable(true)]
        [Category("BazthalLib - Appearance")]
        [Description("Whether or not to load config on statup")]
        [DefaultValue(false)]
        public bool AutoLoadConfig
        {
            get => _autoLoadConfig;
            set
            {
                _autoLoadConfig = value;
            }
        }
        /// <summary>
        /// Gets or sets the path to the theme color configuration file.
        /// </summary>
        [Browsable(true)]
        [Category("BazthalLib - Theming")]
        [Description("Path to a theme color configuration file. - Needed for AutoLoadConfig")]
        [DefaultValue("CustomTheme.json")]
        public string ConfigFilePath
        {
            get => _configFilePath;
            set => _configFilePath = value;
        }

        /// <summary>
        /// Gets or sets the background color used for theming.
        /// </summary>
        [Browsable(true)]
        [Category("BazthalLib - Theming")]
        [Description("Back Color for Theming API")]
        [DefaultValue(typeof(Color), "Control")]
        public Color BackThemeColor
        {
            get => _designerBack;
            set { _designerBack = value; Invalidate(); SetLabelText(backColorLabel, $"Background Color [{value} ]"); }
        }

        /// <summary>
        /// Gets or sets the foreground color used by the theming API.
        /// </summary>
        [Browsable(true)]
        [Category("BazthalLib - Theming")]
        [Description("Fore Color for Theming API")]
        [DefaultValue(typeof(Color), "ControlText")]

        public Color ForeThemeColor
        {
            get => _designerFore;
            set { _designerFore = value; Invalidate(); SetLabelText(foreColorLabel, $"Foreground Color [{value} ]"); }
        }

        /// <summary>
        /// Gets or sets the selected background color for the theming API.
        /// </summary>
        [Browsable(true)]
        [Category("BazthalLib - Theming")]
        [Description("Selected Back Color for Theming API")]
        [DefaultValue(typeof(Color), "Aqua")]

        public Color SelectedBackThemeColor
        {
            get => _designerSelectedBack;
            set { _designerSelectedBack = value; Invalidate(); SetLabelText(selectedBackColorLabel, $"Selected Item Back [ {value} ]"); }
        }

        /// <summary>
        /// Gets or sets the selected foreground color for the theming API.
        /// </summary>
        [Browsable(true)]
        [Category("BazthalLib - Theming")]
        [Description("Selected Fore Color for Theming API")]
        [DefaultValue(typeof(Color), "Blue")]

        public Color SelectedForeThemeColor
        {
            get => _designerSelectedFore;
            set { _designerSelectedFore = value; Invalidate(); SetLabelText(selectedForeColorLabel, $"Selected Item Fore [ {value} ]"); }
        }

        /// <summary>
        /// Gets or sets the border color used for theming.
        /// </summary>
        [Browsable(true)]
        [Category("BazthalLib - Theming")]
        [Description("Border Color for Theming API")]
        [DefaultValue(typeof(Color), "ActiveBorder")]

        public Color BorderThemeColor
        {
            get => _designerBorder;
            set { _designerBorder = value; Invalidate(); SetLabelText(borderColorLabel, $"Border Color [ {value} ]"); }
        }

        /// <summary>
        /// Gets or sets the accent color used by the theming API.
        /// </summary>
        [Browsable(true)]
        [Category("BazthalLib - Theming")]
        [Description("Accent Color for Theming API")]
        [DefaultValue(typeof(Color), "DodgerBlue")]
        public Color AccentThemeColor
        {
            get => _designerAccent;
            set { _designerAccent = value; Invalidate(); SetLabelText(accentColorLabel, $"Accent Color [ {value} ]"); }
        }

        /// <summary>
        /// Gets or sets the color used for disabled elements in the theming API.
        /// </summary>
        [Browsable(true)]
        [Category("BazthalLib - Theming")]
        [Description("Disabled Color for Theming API")]
        [DefaultValue(typeof(Color), "ControlDark")]
        public Color DisabledThemeColor
        {
            get => _designerDisabled;
            set { _designerDisabled = value; Invalidate(); SetLabelText(disabledColorLabel, $"Disbaled Color [ {value} ]"); }
        }

        #endregion Fields and Properties

        #region Controls

        ThemableGroupBox customColors;
        Label backColorLabel, foreColorLabel, accentColorLabel, borderColorLabel, selectedForeColorLabel,
            selectedBackColorLabel, disabledColorLabel;

        ThemableButton pickBackColorButton, pickForeColorButton, pickAccentColorButton,
            pickBorderColorButton, pickSelectedForeColorButton, pickSelectedBackColorButton,
            pickDisabledColorButton, saveThemeButton, loadThemeButton;
        #endregion Controls

        #region Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="ThemeColorsSetter"/> class.
        /// </summary>
        /// <remarks>This constructor sets up the initial state of the <see cref="ThemeColorsSetter"/> by
        /// initializing controls, arranging them, and hooking up necessary events. It is intended to be used when
        /// creating a new instance of the class to ensure that all components are properly configured.</remarks>
        public ThemeColorsSetter()
        {
            InitializeControl();
            InitializeControls();
            LayoutControls();
            HookEvents();
        }


        #endregion Constructor


        #region Initialization Helper Methods
        /// <summary>
        /// Initializes the control with default properties.
        /// </summary>
        /// <remarks>Sets the control to a fixed size of 350x250 pixels. This ensures that all content is self-contained
        /// within the control.</remarks>
        private void InitializeControl()
        {
            // Set the default properties for the control
            // This is a fixed size control since everything should be self contained within
            this.MaximumSize = new Size(350, 250);
            this.MinimumSize = new Size(350, 250);
            //  this.UseThemeColors = _useThemeColors;


        }

        /// <summary>
        /// Initializes the UI controls for customizing theme colors.
        /// </summary>
        /// <remarks>This method sets up various buttons and labels for selecting and displaying custom
        /// theme colors. It configures their positions, text, and visibility based on the current theme
        /// settings.</remarks>
        private void InitializeControls()
        {
            customColors = new ThemableGroupBox
            {
                Location = new Point(10, 10),
                Text = "Custom Theme Colors",
                Dock = DockStyle.Fill,
                UseThemeColors = _useThemeColors
            };

            pickBackColorButton = new ThemableButton { Location = new Point(_btnX, _btnY), Tag = "PickColor" };
            pickForeColorButton = new ThemableButton { Location = new Point(_btnX, _btnY += 30), Tag = "PickColor" };
            pickAccentColorButton = new ThemableButton { Location = new Point(_btnX, _btnY += 30), Tag = "PickColor" };
            pickBorderColorButton = new ThemableButton { Location = new Point(_btnX, _btnY += 30), Tag = "PickColor" };
            pickSelectedForeColorButton = new ThemableButton { Location = new Point(_btnX, _btnY += 30), Tag = "PickColor" };
            pickSelectedBackColorButton = new ThemableButton { Location = new Point(_btnX, _btnY += 30), Tag = "PickColor" };
            pickDisabledColorButton = new ThemableButton { Location = new Point(_btnX, _btnY += 30), Tag = "PickColor" };
            //applyColorsButton = new ThemableButton { Location = new Point(220, 215) , Text = "Apply"};

            backColorLabel = new Label { Location = new Point(_lblX, _lblY), Text = $"Background {BackThemeColor}", AutoSize = true };
            foreColorLabel = new Label { Location = new Point(_lblX, _lblY += 30), Text = $"Foreground {ForeThemeColor}", AutoSize = true };
            accentColorLabel = new Label { Location = new Point(_lblX, _lblY += 30), Text = $"Accent {AccentThemeColor}", AutoSize = true };
            borderColorLabel = new Label { Location = new Point(_lblX, _lblY += 30), Text = $"Border {BorderThemeColor}", AutoSize = true };
            selectedForeColorLabel = new Label { Location = new Point(_lblX, _lblY += 30), Text = $"Selected Foreground {SelectedForeThemeColor}", AutoSize = true };
            selectedBackColorLabel = new Label { Location = new Point(_lblX, _lblY += 30), Text = $"Selected Background {SelectedBackThemeColor}", AutoSize = true };
            disabledColorLabel = new Label { Location = new Point(_lblX, _lblY += 30), Text = $"Disabled {DisabledThemeColor}", AutoSize = true };

            saveThemeButton = new ThemableButton { Location = new Point(300, 220), Text = "Save", Size = new Size(45, 23), Visible = _showSaveLoad };
            loadThemeButton = new ThemableButton { Location = new Point(245, 220), Text = "Load", Size = new Size(45, 23), Visible = _showSaveLoad };
        }

        /// <summary>
        /// Arranges and configures the controls within the custom color selection panel.
        /// </summary>
        /// <remarks>This method adds various color-related controls to the <c>customColors</c> panel and
        /// applies specific settings to buttons tagged as "PickColor". These settings include loading a tinted image,
        /// disabling borders, and enabling accent color usage for the image. The method ensures that any additional
        /// buttons added to the panel later will inherit these settings.</remarks>
        private void LayoutControls()
        {
            Controls.Add(customColors);

            customColors.Controls.AddRange(new Control[]
            {
                backColorLabel, pickBackColorButton,
                foreColorLabel, pickForeColorButton,
                accentColorLabel, pickAccentColorButton,
                borderColorLabel, pickBorderColorButton,
                selectedForeColorLabel, pickSelectedForeColorButton,
                selectedBackColorLabel, pickSelectedBackColorButton,
                disabledColorLabel, pickDisabledColorButton, saveThemeButton, loadThemeButton
            });



            //Set the same settings for all buttons in customColors
            // if save and load buttons are added later, they will also get these settings
            // A refator of Text property will need to be removed and placed with the button definition
            for (int i = 0; i < customColors.Controls.Count; i++)
            {
                if (customColors.Controls[i] is ThemableButton btn)
                {
                    if (btn.Tag != null && btn.Tag.ToString() == "PickColor") //Only change the information on the color picker buttons
                    {
                        btn.TintedImage = TintedImageRenderer.LoadEmbededImage("BazthalLib.Resources.Drop.png");
                        btn.EnableBorder = false;
                        btn.UseAccentForTintedImage = true;
                        btn.FocusWrapAroundImage = true;
                    }
                }
            }
        }

        /// <summary>
        /// Attaches event handlers to UI elements for color selection and theme management actions.
        /// </summary>
        /// <remarks>This method sets up click event handlers for various buttons that allow users to pick
        /// colors for different UI elements and to save or load theme configurations. The event handlers invoke methods
        /// to perform the corresponding actions when the buttons are clicked.</remarks>
        private void HookEvents()
        {
            pickBackColorButton.Click += (s, e) => PickColor("BackColor");
            pickForeColorButton.Click += (s, e) => PickColor("ForeColor");
            pickAccentColorButton.Click += (s, e) => PickColor("AccentColor");
            pickBorderColorButton.Click += (s, e) => PickColor("BorderColor");
            pickSelectedForeColorButton.Click += (s, e) => PickColor("SelectedForeColor");
            pickSelectedBackColorButton.Click += (s, e) => PickColor("SelectedBackColor");
            pickDisabledColorButton.Click += (s, e) => PickColor("DisabledColor");

            saveThemeButton.Click += (s, e) => { if (string.IsNullOrWhiteSpace(_configFilePath)) { _configFilePath = Files.SaveFile("", "JSON files (*.json) | *.json", "Save Theme Colors"); } SaveThemetoJson(); };
            loadThemeButton.Click += (s, e) => { if (string.IsNullOrWhiteSpace(_configFilePath)) { _configFilePath = Files.ChooseFile("", "JSON files (*.json) | *.json", "Load Theme Colors"); } LoadThemeFromJson(); };

            //applyColorsButton.Click += (s, e) => SetColors();

        }


        #endregion Initialization Helper Methods

        #region Methods and Events
        /// <summary>
        /// Sets the text of the specified control.
        /// </summary>
        /// <param name="ctrl">The control whose text is to be set. Cannot be null.</param>
        /// <param name="value">The text to set on the control.</param>
        private void SetLabelText(Control ctrl, string value)
        {
            ctrl.Text = value;
        }

        /// <summary>
        /// Saves the current theme colors to a JSON configuration file.
        /// </summary>
        /// <remarks>This method updates the theme colors in the specified configuration file. If the
        /// configuration file path is not set, the method logs a message and exits without saving.</remarks>
        private void SaveThemetoJson()
        {
            //Make sure the file path is not empty
            if (string.IsNullOrWhiteSpace(_configFilePath))
            {
                DebugUtils.Log("ThemeColorsSetter", "Save", "No config file path set.");
                return;
            }

            var config = new JSON<ThemeColors>(ConfigFilePath, new JsonConverter[] { new ThemeColorsJsonConverter() });
            {
                config.Data.AccentColor = AccentThemeColor;
                config.Data.BackColor = BackThemeColor;
                config.Data.BorderColor = BorderThemeColor;
                config.Data.DisabledColor = DisabledThemeColor;
                config.Data.ForeColor = ForeThemeColor;
                config.Data.SelectedItemBackColor = SelectedBackThemeColor;
                config.Data.SelectedItemForeColor = SelectedForeThemeColor;
            }
            Files.CreateBackup(_configFilePath, 1); 
            config.Save();
            DebugUtils.Log("Save Theme", Name, _configFilePath);
        }

        /// <summary>
        /// Loads theme colors from a JSON configuration file and applies them to the application.
        /// </summary>
        /// <remarks>If the configuration file does not exist, the current theme colors are saved as
        /// defaults. The method updates various UI elements with the loaded theme colors and ensures the theme is saved
        /// after loading to maintain consistency.</remarks>
        private void LoadThemeFromJson()
        {

            //Make sure the file path is not empty
            if (string.IsNullOrWhiteSpace(_configFilePath))
            {
                DebugUtils.Log("ThemeColorsSetter", "Load", "No config file path set.");
                return;
            }
            if (File.Exists(ConfigFilePath))
            {
                var config = new JSON<ThemeColors>(_configFilePath, new JsonConverter[] { new ThemeColorsJsonConverter() });
                config.Load();

                var theme = config.Data;

                AccentThemeColor = theme.AccentColor;
                BackThemeColor = theme.BackColor;
                BorderThemeColor = theme.BorderColor;
                DisabledThemeColor = theme.DisabledColor;
                ForeThemeColor = theme.ForeColor;
                SelectedBackThemeColor = theme.SelectedItemBackColor;
                SelectedForeThemeColor = theme.SelectedItemForeColor;
            }
            else
            {
                //If it doesn't exist save current set colors to file (Likely defaults)
                DebugUtils.Log("ThemeColorsSetter", "Load Theme", "File Not Found - Saving New file");
                SaveThemetoJson();
            }

            SetLabelText(accentColorLabel, $"Accent Color [ {Theming.GetColorNameFromString(AccentThemeColor.ToString())} ]");
            SetLabelText(backColorLabel, $"Background Color [ {Theming.GetColorNameFromString(BackThemeColor.ToString())} ]");
            SetLabelText(borderColorLabel, $"Border Color [ {Theming.GetColorNameFromString(BorderThemeColor.ToString())} ]");
            SetLabelText(disabledColorLabel, $"Disabled Color [ {Theming.GetColorNameFromString(DisabledThemeColor.ToString())} ]");
            SetLabelText(foreColorLabel, $"Fore Color [ {Theming.GetColorNameFromString(ForeThemeColor.ToString())} ]");
            SetLabelText(selectedBackColorLabel, $"Selected Item Back [ {Theming.GetColorNameFromString(SelectedBackThemeColor.ToString())} ]");
            SetLabelText(selectedForeColorLabel, $"Selected Item Fore [ {Theming.GetColorNameFromString(SelectedForeThemeColor.ToString())} ]");

            SetColors();

            DebugUtils.Log("Load Theme", Name, _configFilePath);

            //Resave at load to make sure correct just incase it was restored to default with the color converter 
            SaveThemetoJson();
        }

        /// <summary>
        /// Configures and applies custom theme colors to the application.
        /// </summary>
        /// <remarks>This method sets the application's theme colors by creating a <see
        /// cref="ThemeColors"/> object with the specified theme color properties and applies it using the theming
        /// system. If the current theme is already set to custom, it refreshes the theme to apply the new
        /// colors.</remarks>
        private void SetColors()
        {
            var custom = new ThemeColors
            {
                BackColor = BackThemeColor,
                ForeColor = ForeThemeColor,
                BorderColor = BorderThemeColor,
                AccentColor = AccentThemeColor,
                SelectedItemBackColor = SelectedBackThemeColor,
                SelectedItemForeColor = SelectedForeThemeColor,
                DisabledColor = DisabledThemeColor
            };
            Theming.SetCustomTheme(custom);
            if (Theming.CurrentTheme == Theming.AppTheme.Custom)
                Theming.SetTheme(Theming.AppTheme.Custom); //Refresh the theme if it's already on custom

        }

        /// <summary>
        /// Handles the creation of the control's handle and applies theming and configuration settings.
        /// </summary>
        /// <remarks>This method registers the parent form for theming, loads theme configuration from a
        /// JSON file if specified,  and updates the control's appearance. It is not executed in design mode.</remarks>
        /// <param name="e">An <see cref="EventArgs"/> that contains the event data.</param>
        protected override void OnHandleCreated(EventArgs e)
        {
            base.OnHandleCreated(e);
            if (!DesignMode)
            {
                Theming.RegisterForm(this.ParentForm);

                if (_autoLoadConfig && !string.IsNullOrWhiteSpace(_configFilePath))
                    LoadThemeFromJson();

                SetColors();
                Invalidate();
                Refresh();
            }
        }

        /// <summary>
        /// Allows the user to select a color and applies it to the specified theme element.
        /// </summary>
        /// <remarks>This method opens a color picker dialog for the user to select a color. The selected
        /// color is then applied to the specified theme element, updating the corresponding UI component and theme
        /// configuration. If the configuration file path is set and automatic saving is enabled, the theme is saved to
        /// a JSON file. The UI is then refreshed to reflect the changes.</remarks>
        /// <param name="color">The name of the theme element to which the selected color will be applied. Valid values include "BackColor",
        /// "ForeColor", "AccentColor", "BorderColor", "SelectedForeColor", "SelectedBackColor", and "DisabledColor".</param>
        private void PickColor(string color)
        {
            Color? selected = ThemableColorPickerDialog.Show();
            if (selected.HasValue || selected != null)
            {
                DebugUtils.Log("PickColor", "ThemeColorsSetter", $"Selected color for {color}: {selected.Value}");

                var selectedColor = Theming.GetColorNameFromString(selected.Value.ToString());

                DebugUtils.Log("PickColor", "ThemeColorsSetter", $"Selected color name for {color}: {selectedColor}");

                switch (color)
                {
                    case "BackColor":
                        _themeColors.BackColor = selected.Value;
                        BackThemeColor = selected.Value;
                        SetLabelText(backColorLabel, $"Background Color [ {selectedColor} ]");
                        break;
                    case "ForeColor":
                        _themeColors.ForeColor = selected.Value;
                        ForeThemeColor = selected.Value;
                        SetLabelText(foreColorLabel, $"Foreground Color [ {selectedColor} ]");
                        break;
                    case "AccentColor":
                        _themeColors.AccentColor = selected.Value;
                        AccentThemeColor = selected.Value;
                        SetLabelText(accentColorLabel, $"Accent Color [ {selectedColor} ]");
                        break;
                    case "BorderColor":
                        _themeColors.BorderColor = selected.Value;
                        BorderThemeColor = selected.Value;
                        SetLabelText(borderColorLabel, $"Border Color [ {selectedColor} ]");
                        break;
                    case "SelectedForeColor":
                        _themeColors.SelectedItemForeColor = selected.Value;
                        SelectedForeThemeColor = selected.Value;
                        SetLabelText(selectedForeColorLabel, $"Selected Item Fore [ {selectedColor} ]");
                        break;
                    case "SelectedBackColor":
                        _themeColors.SelectedItemBackColor = selected.Value;
                        SelectedBackThemeColor = selected.Value;
                        SetLabelText(selectedBackColorLabel, $"Selected Item Back [ {selectedColor} ]");
                        break;
                    case "DisabledColor":
                        _themeColors.DisabledColor = selected.Value;
                        DisabledThemeColor = selected.Value;
                        SetLabelText(disabledColorLabel, $"Disbaled Color [ {selectedColor} ]");
                        break;
                }
                SetColors();
                //If the buttons are not visible and the config path is set save config to file
                //Lets the user choose for manual / automatic saving
                if (!_showSaveLoad && !string.IsNullOrWhiteSpace(_configFilePath))
                    SaveThemetoJson();
                // Apply to custom theme
                Invalidate();
                Refresh();
            }
        }

        #endregion Methods and Events

    }

}
